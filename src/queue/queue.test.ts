import { Queue } from "./queue"

describe('Testing Queue', () => {
    it('head should be null when Queue is empty', () => {
        const queue = new Queue()
        expect(queue.head).toBeNull()
    })
    it('should add elements', () => {
        const queue = new Queue<number>()
        queue.push(1)
        queue.push(2)
        queue.push(3)
        expect(queue.head).toBe(1)
    })
    it('should remove elements from the front of the queue', () => {
        const queue = new Queue<number>()
        queue.push(1)
        queue.push(2)
        queue.push(3)
        expect(queue.pop()).toBe(1)
        expect(queue.head).toBe(2)
        expect(queue.pop()).toBe(2)
        expect(queue.head).toBe(3)
        expect(queue.pop()).toBe(3)
        expect(queue.head).toBeNull()
        expect(queue.tail).toBeNull()
        expect(() => queue.pop()).toThrowError('Queue is empty')
    })
    it('should remove elements from the rear of the queue', () => {
        const queue = new Queue<number>()
        queue.push(1)
        queue.push(2)
        queue.push(3)
        expect(queue.unshift()).toBe(3)
        expect(queue.head).toBe(1)
        expect(queue.unshift()).toBe(2)
        expect(queue.head).toBe(1)
        expect(queue.unshift()).toBe(1)
        expect(queue.head).toBeNull()
        expect(() => queue.unshift()).toThrowError('Queue is empty')
    })
    it('size property should work properly on remove and push values', () => {
        const queue = new Queue<number>()
        expect(queue.size).toBe(0)
        queue.push(1)
        expect(queue.size).toBe(1)
        queue.push(2)
        expect(queue.size).toBe(2)
        queue.push(3)
        expect(queue.size).toBe(3)
        queue.pop()
        expect(queue.size).toBe(2)
        queue.unshift()
        expect(queue.size).toBe(1)
        queue.pop()
        expect(queue.size).toBe(0)
    })
    it('size property should not go to negative', () => {
        const queue = new Queue<number>()
        queue.push(1)
        queue.push(2)
        queue.push(3)
        queue.pop()
        queue.pop()
        queue.pop()
        expect(() => queue.pop()).toThrowError('Queue is empty')
        expect(queue.size).toBe(0)
    })
})